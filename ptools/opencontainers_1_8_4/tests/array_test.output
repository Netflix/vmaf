0 1 2 3 4 5 6 7 8 9 ### testing []
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing ()
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing at
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing out of range for []
GOOD: Range error as expected
### testing out of range for at
GOOD: Range error as expected
### Starting with a size of zero and letting it resize up
## Just inserted 0
0 
## Just inserted 1
0 1 
## Just inserted 2
0 1 2 
## Just inserted 3
0 1 2 3 
## Just inserted 4
0 1 2 3 4 
## Just inserted 5
0 1 2 3 4 5 
## Just inserted 6
0 1 2 3 4 5 6 
## Just inserted 7
0 1 2 3 4 5 6 7 
## Just inserted 8
0 1 2 3 4 5 6 7 8 
## Just inserted 9
0 1 2 3 4 5 6 7 8 9 
## Just inserted 10
0 1 2 3 4 5 6 7 8 9 10 
## Just inserted 11
0 1 2 3 4 5 6 7 8 9 10 11 
## Just inserted 12
0 1 2 3 4 5 6 7 8 9 10 11 12 
## Just inserted 13
0 1 2 3 4 5 6 7 8 9 10 11 12 13 
## Just inserted 14
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 
## Just inserted 15
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
## Just inserted 16
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
## Just inserted 17
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
## Just inserted 18
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
## Just inserted 19
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
## Just inserted 20
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
## Just inserted 21
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 
## Just inserted 22
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 
## Just inserted 23
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 
## Just inserted 24
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
## Just inserted 25
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
## Just inserted 26
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
## Just inserted 27
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
## Just inserted 28
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 
## Just inserted 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
## Just inserted 30
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
## Just inserted 31
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### Testing the copy constructor
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### Testing the op=
beq (before) = 
bc (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
bc (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### testing the clear
bc (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
bc (after) = 
### testing the contains
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: contains works ... (has 5)
GOOD: contains works ... (DOES NOT have 100)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing the find
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: find works ... (has 5
GOOD: find works ... (DOES NOT have 100 and didn't set 5)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing the index
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: index works ... (found 5 at index 5)
GOOD: index works ... (DOES NOT have 100)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing data
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### testing insert
0 1 2 
### testing insertAt

 # testing if can insertAt in empty
GOOD:  Can't insertAt early into empty
 # insert right at front of empty
777 
 # try multiple inserts ats
666 777 
555 666 777 
555 666 600 777 

### testing isEmpty
ERROR: empty
GOOD: not empty
### testing prepend
3 2 1 0 
### testing removeAll
Removing [4] from 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
 removed a total of 0 items,  giving:
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
Removing [0] from 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
 removed a total of 20 items,  giving:
3 
Removing [3] from 
3 
 removed a total of 1 items,  giving:

### testing remove
 r before = 7 6 5 4 3 2 1 0 
 removed 0 okay ... left: 7 6 5 4 3 2 1 
 r before = 7 6 5 4 3 2 1 
 removed 1 okay ... left: 7 6 5 4 3 2 
 r before = 7 6 5 4 3 2 
 removed 2 okay ... left: 7 6 5 4 3 
 r before = 7 6 5 4 3 
 removed 3 okay ... left: 7 6 5 4 
 r before = 7 6 5 4 
 removed 4 okay ... left: 7 6 5 
 r before = 7 6 5 
 removed 5 okay ... left: 7 6 
 r before = 7 6 
 removed 6 okay ... left: 7 
 r before = 7 
 removed 7 okay ... left: 
### testing removeAt
 removing position 0 from 0 1 2 3 4 5 6 7 
 at that pos was 0 and left over array is 1 2 3 4 5 6 7 
 removing position 1 from 0 1 2 3 4 5 6 7 
 at that pos was 1 and left over array is 0 2 3 4 5 6 7 
 removing position 2 from 0 1 2 3 4 5 6 7 
 at that pos was 2 and left over array is 0 1 3 4 5 6 7 
 removing position 3 from 0 1 2 3 4 5 6 7 
 at that pos was 3 and left over array is 0 1 2 4 5 6 7 
 removing position 4 from 0 1 2 3 4 5 6 7 
 at that pos was 4 and left over array is 0 1 2 3 5 6 7 
 removing position 5 from 0 1 2 3 4 5 6 7 
 at that pos was 5 and left over array is 0 1 2 3 4 6 7 
 removing position 6 from 0 1 2 3 4 5 6 7 
 at that pos was 6 and left over array is 0 1 2 3 4 5 7 
 removing position 7 from 0 1 2 3 4 5 6 7 
 at that pos was 7 and left over array is 0 1 2 3 4 5 6 
GOOD:  caught bounds error for removeAt
### testing removeRange
*BadIndex for start = -1 run_length = -1
*BadIndex for start = -1 run_length = 0
*BadIndex for start = -1 run_length = 1
*BadIndex for start = -1 run_length = 2
*BadIndex for start = -1 run_length = 3
*BadIndex for start = -1 run_length = 4
*BadIndex for start = -1 run_length = 5
*BadIndex for start = -1 run_length = 6
*BadIndex for start = -1 run_length = 7
*BadIndex for start = -1 run_length = 8
*BadIndex for start = 0 run_length = -1
Effects of removeRange(0, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(0, 1):1 2 3 4 5 6 7 
Effects of removeRange(0, 2):2 3 4 5 6 7 
Effects of removeRange(0, 3):3 4 5 6 7 
Effects of removeRange(0, 4):4 5 6 7 
Effects of removeRange(0, 5):5 6 7 
Effects of removeRange(0, 6):6 7 
Effects of removeRange(0, 7):7 
Effects of removeRange(0, 8):
*BadIndex for start = 1 run_length = -1
Effects of removeRange(1, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(1, 1):0 2 3 4 5 6 7 
Effects of removeRange(1, 2):0 3 4 5 6 7 
Effects of removeRange(1, 3):0 4 5 6 7 
Effects of removeRange(1, 4):0 5 6 7 
Effects of removeRange(1, 5):0 6 7 
Effects of removeRange(1, 6):0 7 
Effects of removeRange(1, 7):0 
*BadIndex for start = 1 run_length = 8
*BadIndex for start = 2 run_length = -1
Effects of removeRange(2, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(2, 1):0 1 3 4 5 6 7 
Effects of removeRange(2, 2):0 1 4 5 6 7 
Effects of removeRange(2, 3):0 1 5 6 7 
Effects of removeRange(2, 4):0 1 6 7 
Effects of removeRange(2, 5):0 1 7 
Effects of removeRange(2, 6):0 1 
*BadIndex for start = 2 run_length = 7
*BadIndex for start = 2 run_length = 8
*BadIndex for start = 3 run_length = -1
Effects of removeRange(3, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(3, 1):0 1 2 4 5 6 7 
Effects of removeRange(3, 2):0 1 2 5 6 7 
Effects of removeRange(3, 3):0 1 2 6 7 
Effects of removeRange(3, 4):0 1 2 7 
Effects of removeRange(3, 5):0 1 2 
*BadIndex for start = 3 run_length = 6
*BadIndex for start = 3 run_length = 7
*BadIndex for start = 3 run_length = 8
*BadIndex for start = 4 run_length = -1
Effects of removeRange(4, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(4, 1):0 1 2 3 5 6 7 
Effects of removeRange(4, 2):0 1 2 3 6 7 
Effects of removeRange(4, 3):0 1 2 3 7 
Effects of removeRange(4, 4):0 1 2 3 
*BadIndex for start = 4 run_length = 5
*BadIndex for start = 4 run_length = 6
*BadIndex for start = 4 run_length = 7
*BadIndex for start = 4 run_length = 8
*BadIndex for start = 5 run_length = -1
Effects of removeRange(5, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(5, 1):0 1 2 3 4 6 7 
Effects of removeRange(5, 2):0 1 2 3 4 7 
Effects of removeRange(5, 3):0 1 2 3 4 
*BadIndex for start = 5 run_length = 4
*BadIndex for start = 5 run_length = 5
*BadIndex for start = 5 run_length = 6
*BadIndex for start = 5 run_length = 7
*BadIndex for start = 5 run_length = 8
*BadIndex for start = 6 run_length = -1
Effects of removeRange(6, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(6, 1):0 1 2 3 4 5 7 
Effects of removeRange(6, 2):0 1 2 3 4 5 
*BadIndex for start = 6 run_length = 3
*BadIndex for start = 6 run_length = 4
*BadIndex for start = 6 run_length = 5
*BadIndex for start = 6 run_length = 6
*BadIndex for start = 6 run_length = 7
*BadIndex for start = 6 run_length = 8
*BadIndex for start = 7 run_length = -1
Effects of removeRange(7, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(7, 1):0 1 2 3 4 5 6 
*BadIndex for start = 7 run_length = 2
*BadIndex for start = 7 run_length = 3
*BadIndex for start = 7 run_length = 4
*BadIndex for start = 7 run_length = 5
*BadIndex for start = 7 run_length = 6
*BadIndex for start = 7 run_length = 7
*BadIndex for start = 7 run_length = 8
*BadIndex for start = 8 run_length = -1
*BadIndex for start = 8 run_length = 0
*BadIndex for start = 8 run_length = 1
*BadIndex for start = 8 run_length = 2
*BadIndex for start = 8 run_length = 3
*BadIndex for start = 8 run_length = 4
*BadIndex for start = 8 run_length = 5
*BadIndex for start = 8 run_length = 6
*BadIndex for start = 8 run_length = 7
*BadIndex for start = 8 run_length = 8
0 1 2 3 4 5 6 7 8 9 
### testing []
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing ()
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing at
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
### testing out of range for []
GOOD: Range error as expected
### testing out of range for at
GOOD: Range error as expected
### Starting with a size of zero and letting it resize up
## Just inserted 0
0 
## Just inserted 1
0 1 
## Just inserted 2
0 1 2 
## Just inserted 3
0 1 2 3 
## Just inserted 4
0 1 2 3 4 
## Just inserted 5
0 1 2 3 4 5 
## Just inserted 6
0 1 2 3 4 5 6 
## Just inserted 7
0 1 2 3 4 5 6 7 
## Just inserted 8
0 1 2 3 4 5 6 7 8 
## Just inserted 9
0 1 2 3 4 5 6 7 8 9 
## Just inserted 10
0 1 2 3 4 5 6 7 8 9 10 
## Just inserted 11
0 1 2 3 4 5 6 7 8 9 10 11 
## Just inserted 12
0 1 2 3 4 5 6 7 8 9 10 11 12 
## Just inserted 13
0 1 2 3 4 5 6 7 8 9 10 11 12 13 
## Just inserted 14
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 
## Just inserted 15
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
## Just inserted 16
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 
## Just inserted 17
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
## Just inserted 18
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 
## Just inserted 19
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 
## Just inserted 20
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 
## Just inserted 21
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 
## Just inserted 22
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 
## Just inserted 23
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 
## Just inserted 24
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 
## Just inserted 25
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
## Just inserted 26
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
## Just inserted 27
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 
## Just inserted 28
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 
## Just inserted 29
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 
## Just inserted 30
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
## Just inserted 31
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### Testing the copy constructor
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### Testing the op=
beq (before) = 
bc (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
bc (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### testing the clear
bc (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
bc (after) = 
### testing the contains
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: contains works ... (has 5)
GOOD: contains works ... (DOES NOT have 100)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing the find
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: find works ... (has 5
GOOD: find works ... (DOES NOT have 100 and didn't set 5)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing the index
beq (before) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
GOOD: index works ... (found 5 at index 5)
GOOD: index works ... (DOES NOT have 100)
beq (after) = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 

### testing data
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 
### testing insert
0 1 2 
### testing insertAt

 # testing if can insertAt in empty
GOOD:  Can't insertAt early into empty
 # insert right at front of empty
777 
 # try multiple inserts ats
666 777 
555 666 777 
555 666 600 777 

### testing isEmpty
GOOD: is empty
GOOD: not empty
### testing prepend
3 2 1 0 
### testing removeAll
Removing [4] from 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
 removed a total of 0 items,  giving:
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
Removing [0] from 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 
 removed a total of 20 items,  giving:
3 
Removing [3] from 
3 
 removed a total of 1 items,  giving:

### testing remove
 r before = 7 6 5 4 3 2 1 0 
 removed 0 okay ... left: 7 6 5 4 3 2 1 
 r before = 7 6 5 4 3 2 1 
 removed 1 okay ... left: 7 6 5 4 3 2 
 r before = 7 6 5 4 3 2 
 removed 2 okay ... left: 7 6 5 4 3 
 r before = 7 6 5 4 3 
 removed 3 okay ... left: 7 6 5 4 
 r before = 7 6 5 4 
 removed 4 okay ... left: 7 6 5 
 r before = 7 6 5 
 removed 5 okay ... left: 7 6 
 r before = 7 6 
 removed 6 okay ... left: 7 
 r before = 7 
 removed 7 okay ... left: 
### testing removeAt
 removing position 0 from 0 1 2 3 4 5 6 7 
 at that pos was 0 and left over array is 1 2 3 4 5 6 7 
 removing position 1 from 0 1 2 3 4 5 6 7 
 at that pos was 1 and left over array is 0 2 3 4 5 6 7 
 removing position 2 from 0 1 2 3 4 5 6 7 
 at that pos was 2 and left over array is 0 1 3 4 5 6 7 
 removing position 3 from 0 1 2 3 4 5 6 7 
 at that pos was 3 and left over array is 0 1 2 4 5 6 7 
 removing position 4 from 0 1 2 3 4 5 6 7 
 at that pos was 4 and left over array is 0 1 2 3 5 6 7 
 removing position 5 from 0 1 2 3 4 5 6 7 
 at that pos was 5 and left over array is 0 1 2 3 4 6 7 
 removing position 6 from 0 1 2 3 4 5 6 7 
 at that pos was 6 and left over array is 0 1 2 3 4 5 7 
 removing position 7 from 0 1 2 3 4 5 6 7 
 at that pos was 7 and left over array is 0 1 2 3 4 5 6 
GOOD:  caught bounds error for removeAt
### testing removeRange
*BadIndex for start = -1 run_length = -1
*BadIndex for start = -1 run_length = 0
*BadIndex for start = -1 run_length = 1
*BadIndex for start = -1 run_length = 2
*BadIndex for start = -1 run_length = 3
*BadIndex for start = -1 run_length = 4
*BadIndex for start = -1 run_length = 5
*BadIndex for start = -1 run_length = 6
*BadIndex for start = -1 run_length = 7
*BadIndex for start = -1 run_length = 8
*BadIndex for start = 0 run_length = -1
Effects of removeRange(0, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(0, 1):1 2 3 4 5 6 7 
Effects of removeRange(0, 2):2 3 4 5 6 7 
Effects of removeRange(0, 3):3 4 5 6 7 
Effects of removeRange(0, 4):4 5 6 7 
Effects of removeRange(0, 5):5 6 7 
Effects of removeRange(0, 6):6 7 
Effects of removeRange(0, 7):7 
Effects of removeRange(0, 8):
*BadIndex for start = 1 run_length = -1
Effects of removeRange(1, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(1, 1):0 2 3 4 5 6 7 
Effects of removeRange(1, 2):0 3 4 5 6 7 
Effects of removeRange(1, 3):0 4 5 6 7 
Effects of removeRange(1, 4):0 5 6 7 
Effects of removeRange(1, 5):0 6 7 
Effects of removeRange(1, 6):0 7 
Effects of removeRange(1, 7):0 
*BadIndex for start = 1 run_length = 8
*BadIndex for start = 2 run_length = -1
Effects of removeRange(2, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(2, 1):0 1 3 4 5 6 7 
Effects of removeRange(2, 2):0 1 4 5 6 7 
Effects of removeRange(2, 3):0 1 5 6 7 
Effects of removeRange(2, 4):0 1 6 7 
Effects of removeRange(2, 5):0 1 7 
Effects of removeRange(2, 6):0 1 
*BadIndex for start = 2 run_length = 7
*BadIndex for start = 2 run_length = 8
*BadIndex for start = 3 run_length = -1
Effects of removeRange(3, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(3, 1):0 1 2 4 5 6 7 
Effects of removeRange(3, 2):0 1 2 5 6 7 
Effects of removeRange(3, 3):0 1 2 6 7 
Effects of removeRange(3, 4):0 1 2 7 
Effects of removeRange(3, 5):0 1 2 
*BadIndex for start = 3 run_length = 6
*BadIndex for start = 3 run_length = 7
*BadIndex for start = 3 run_length = 8
*BadIndex for start = 4 run_length = -1
Effects of removeRange(4, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(4, 1):0 1 2 3 5 6 7 
Effects of removeRange(4, 2):0 1 2 3 6 7 
Effects of removeRange(4, 3):0 1 2 3 7 
Effects of removeRange(4, 4):0 1 2 3 
*BadIndex for start = 4 run_length = 5
*BadIndex for start = 4 run_length = 6
*BadIndex for start = 4 run_length = 7
*BadIndex for start = 4 run_length = 8
*BadIndex for start = 5 run_length = -1
Effects of removeRange(5, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(5, 1):0 1 2 3 4 6 7 
Effects of removeRange(5, 2):0 1 2 3 4 7 
Effects of removeRange(5, 3):0 1 2 3 4 
*BadIndex for start = 5 run_length = 4
*BadIndex for start = 5 run_length = 5
*BadIndex for start = 5 run_length = 6
*BadIndex for start = 5 run_length = 7
*BadIndex for start = 5 run_length = 8
*BadIndex for start = 6 run_length = -1
Effects of removeRange(6, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(6, 1):0 1 2 3 4 5 7 
Effects of removeRange(6, 2):0 1 2 3 4 5 
*BadIndex for start = 6 run_length = 3
*BadIndex for start = 6 run_length = 4
*BadIndex for start = 6 run_length = 5
*BadIndex for start = 6 run_length = 6
*BadIndex for start = 6 run_length = 7
*BadIndex for start = 6 run_length = 8
*BadIndex for start = 7 run_length = -1
Effects of removeRange(7, 0):0 1 2 3 4 5 6 7 
Effects of removeRange(7, 1):0 1 2 3 4 5 6 
*BadIndex for start = 7 run_length = 2
*BadIndex for start = 7 run_length = 3
*BadIndex for start = 7 run_length = 4
*BadIndex for start = 7 run_length = 5
*BadIndex for start = 7 run_length = 6
*BadIndex for start = 7 run_length = 7
*BadIndex for start = 7 run_length = 8
*BadIndex for start = 8 run_length = -1
*BadIndex for start = 8 run_length = 0
*BadIndex for start = 8 run_length = 1
*BadIndex for start = 8 run_length = 2
*BadIndex for start = 8 run_length = 3
*BadIndex for start = 8 run_length = 4
*BadIndex for start = 8 run_length = 5
*BadIndex for start = 8 run_length = 6
*BadIndex for start = 8 run_length = 7
*BadIndex for start = 8 run_length = 8
aa <  a :0
aa <= a :0
aa >  a :1
aa >= a :1
aa != a :1
aa == a :0
aa <  aa :0
aa <= aa :1
aa >  aa :0
aa >= aa :1
aa != aa :0
aa == aa :1
aa <  aab :1
aa <= aab :1
aa >  aab :0
aa >= aab :0
aa != aab :1
aa == aab :0
0 1 2  capacity:4 length:3
abcdefghijklmnopqrstuvwxyz01234567890 abcdefghijklmnopqrstuvwxyz01234567891 abcdefghijklmnopqrstuvwxyz01234567892  capacity:8 length:3
abcdefghijklmnopqrstuvwxyz01234567890 abcdefghijklmnopqrstuvwxyz01234567891 abcdefghijklmnopqrstuvwxyz01234567892  capacity:8 length:3
0 1 2  capacity:4 length:3
abcdefghijklmnopqrstuvwxyz01234567890 abcdefghijklmnopqrstuvwxyz01234567891 abcdefghijklmnopqrstuvwxyz01234567892 YYZ0 YYZ1  capacity:8 length:5
0 1 2 ZZZ0 ZZZ1  capacity:8 length:5
0 1 2 ZZZ0 ZZZ1  capacity:8 length:5
abcdefghijklmnopqrstuvwxyz01234567890 abcdefghijklmnopqrstuvwxyz01234567891 abcdefghijklmnopqrstuvwxyz01234567892 YYZ0 YYZ1  capacity:8 length:5
Fill Tests:

one 
one two two 
one two two three three three 
one two two three three three threemore threemore threemore 
one two two three three three threemore threemore threemore to_capacity 
a.capacity() == 10
a.capacity() == 20
one two two three three three threemore threemore threemore to_capacity force_doubles 
one two two three three three threemore threemore threemore to_capacity force_doubles AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE AFTERDOUBLE 
a.capacity() == 20

666 666 666 666 666 666 
3 0 0
3 0 1
3 0 0

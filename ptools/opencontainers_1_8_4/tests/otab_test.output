cx? o0
int? o0
uint? o0
is numeric? o0
Empty Otab has tag:o
 .. length=0
 .. entries=0
'one':1
'two':2.2
'three':'three'
Expected exception:Key 'not here' not in table
*When keys there, () and [] act same on lookup
1 2.2 'three'
1 2.2 'three'
*Two ways to print: normal and pretty
OrderedDict([('one', 1), ('two', 2.2), ('three', 'three')])
o{
    'one':1,
    'two':2.2,
    'three':'three'
}
** Trying literal:o{}
OrderedDict([])
o{ }
 .. reversing process
  from stream:OrderedDict([])
  from prettyPrint:o{ }

** Trying literal:o{'a':1}
OrderedDict([('a', 1)])
o{
    'a':1
}
 .. reversing process
  from stream:OrderedDict([('a', 1)])
  from prettyPrint:o{
    'a':1
}

** Trying literal:o{'a':1,}
OrderedDict([('a', 1)])
o{
    'a':1
}
 .. reversing process
  from stream:OrderedDict([('a', 1)])
  from prettyPrint:o{
    'a':1
}

** Trying literal:o{ 'a':o{'a':1, 'b':2, 'c':3}, 'k':o{ } }
OrderedDict([('a', OrderedDict([('a', 1), ('b', 2), ('c', 3)])), ('k', OrderedDict([]))])
o{
    'a':o{
        'a':1,
        'b':2,
        'c':3
    },
    'k':o{ }
}
 .. reversing process
  from stream:OrderedDict([('a', OrderedDict([('a', 1), ('b', 2), ('c', 3)])), ('k', OrderedDict([]))])
  from prettyPrint:o{
    'a':o{
        'a':1,
        'b':2,
        'c':3
    },
    'k':o{ }
}

** Trying literal:o{ 'a':o{'a':1, 'b':2, 'c':3}, 'k':None }
OrderedDict([('a', OrderedDict([('a', 1), ('b', 2), ('c', 3)])), ('k', None)])
o{
    'a':o{
        'a':1,
        'b':2,
        'c':3
    },
    'k':None
}
 .. reversing process
  from stream:OrderedDict([('a', OrderedDict([('a', 1), ('b', 2), ('c', 3)])), ('k', None)])
  from prettyPrint:o{
    'a':o{
        'a':1,
        'b':2,
        'c':3
    },
    'k':None
}

** Trying literal:OrderedDict([])
OrderedDict([])
o{ }
 .. reversing process
  from stream:OrderedDict([])
  from prettyPrint:o{ }

** Trying literal:OrderedDict([('a',1)])
OrderedDict([('a', 1)])
o{
    'a':1
}
 .. reversing process
  from stream:OrderedDict([('a', 1)])
  from prettyPrint:o{
    'a':1
}

** Trying literal:OrderedDict([('a',1,)])
OrderedDict([('a', 1)])
o{
    'a':1
}
 .. reversing process
  from stream:OrderedDict([('a', 1)])
  from prettyPrint:o{
    'a':1
}

**AppendOrderedDict([('one', 1), ('two', 2.2), ('three', 'three')])
** afterOrderedDict([('one', 1), ('two', 2.2), ('three', 'three'), (3, 'hello')])
** afterOrderedDict([('two', 2.2), ('three', 'three'), (3, 'hello')])
Expected Exception:Appending key:3 with value:'hello again' into table:OrderedDict([('two', 2.2), ('three', 'three'), (3, 'hello')]) will cause an overwrite of the previous key of that value: That's probably not what you want append to do.
'two' 2.2
'three' 'three'
3 'hello'
** Make sure you can compare OTab
OrderedDict([('a', 1), ('b', 2), ('c', 3)]) OrderedDict([('a', 1), ('c', 2)])
0
1
0
0
1
1
OrderedDict([('a', 1), ('b', 2), ('d', 3)]) OrderedDict([('a', 1), ('c', 3), ('d', 3)])
0
1
1
1
0
0
OrderedDict([('a', 1), ('b', 2), ('c', 3)]) OrderedDict([('a', 1), ('b', 3), ('c', 3)])
0
1
1
1
0
0
** Make sure you can compare OTab and Tab together like Python
1
1
0
1
1
0
** Testing get
1
None
1
17
**Testing append
OrderedDict([(0, 0), (1, 1), (2, 2)])
OrderedDict([(0, 0), (2, 2)])
Expected exception:Appending key:2 with value:3 into table:OrderedDict([(0, 0), (2, 2)]) will cause an overwrite of the previous key of that value: That's probably not what you want append to do.
**Try out the conversions:
OrderedDict([('a', 1), ('b', 2), ('c', 3.3)]) {'a': 1, 'b': 2, 'c': 3.3}
OrderedDict([('a', 1), ('b', 2), ('c', 3.3)]) {'a': 1, 'b': 2, 'c': 3.3}
OrderedDict([(None, None), (None, None), (None, None)]) {'a': 1, 'b': 2, 'c': 3}
OrderedDict([('a', 1), ('b', 2), ('c', 3)]) {None: None, None: None, None: None}
o{
    0:'a',
    1:'b',
    2:'c',
    3:'d',
    4:(
        1,
        2,
        {
            0:1,
            1:2
        }
    ),
    5:o{
        'a':{
            0:1,
            1:3
        },
        'b':{
            '0':'yay',
            '1':'boo'
        }
    }
}
o{
    0:'a',
    1:'b',
    2:'c',
    3:'d',
    4:(
        1,
        2,
        [
            1,
            2
        ]
    ),
    5:o{
        'a':[
            1,
            3
        ],
        'b':[
            'yay',
            'boo'
        ]
    }
}
{
    0:'a',
    1:'b',
    2:'c',
    3:{
        '0':'yay',
        '1':'boo'
    }
}
[
    'a',
    'b',
    'c',
    [
        'yay',
        'boo'
    ]
]
{
    0:1,
    1:2,
    2:(
        1,
        2,
        {
            0:1,
            1:2,
            2:3
        },
        o{
            'a':{
                0:1,
                1:2,
                2:3
            }
        }
    )
}
None
None
{'a': 1, 'b': 2, 'c': 3}
{'a': 1, 'b': 2, 'c': 3}
[1, 2, 3]
[1, 2, 3]
OrderedDict([('a', 1), ('b', 2), ('c', 3)])
{'a': 1, 'b': 2, 'c': 3}
(1, 2, 3)
[1, 2, 3]
(1, 2, 3)
[1, 2, 3]
(1, (1, 2, 3), OrderedDict([('a', 1), ('b', (1, 2, 3)), ('c', OrderedDict([(1, 1), (2, 2)]))]))
[1, [1, 2, 3], {'a': 1, 'b': [1, 2, 3], 'c': {1: 1, 2: 2}}]
(OrderedDict([('a', 1), ('b', 2)]), OrderedDict([('a', 1), ('b', 2)]))
111
[{'a': 1, 'b': 2}, {'a': 1, 'b': 2}]
111
*** Trying AsList
None [100]
[100] [1, 2, 3]
{'a': None, 'b': None} [('a', [1, 2, 3]), ('b', {'q': 'bert'})]
OrderedDict([('a', None), ('b', None)]) [('a', [1, 2, 3]), ('b', {'q': 'bert'})]
array([5,5,666], 'i') [5, 5, 666]
